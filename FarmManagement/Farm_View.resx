<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="cbxSpecies.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAscV0AAQAAACSnfRVB4+QtSOr/UEXn/HlB5fyRPeX+kz7o
        /5ND6f2QR+P4hEDh925E5/9rKsCubBGnanUUqGyIFKlsjhSkaWodjGIOHI1jAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAC2zhAMdnmsWG51rfCS/m+Mx2tX6OuP0/zza
        8P895v3/P8HW/z/I3v883PD/OM7b/zXe5f8hyKb/DrZu/w63b/8OuW7/D7Ns9RKqa6cVpmxkFZ9pNBuf
        aioanWggGZhnFyeQaglTXXIAQ3dxAAAAAAAAAAAAAAAAAAAAAAAAAAAAFKxuiBC0cNQQsW7oELFt+xG5
        dv8n0Ln/PNrv/z/B1v8+xdr/Pszi/zTW2f8gyKP/Fr+G/xC6dP8Mt27/Da5v/w6Rff8NhnT/DqRt/w+z
        bfsPtm7wELVv6RCzbuEQsW7WEbBvvBSpbG8jgmIHIYhjAAAAAAAAAAAAAAAAAAAAAAAXn2hZEa5tuw63
        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
        TbtmTU3/TEtV/0pRYP9NTVj/U0JB/2RHQP9gRj/yAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8a
        GgDSkIUAeFVQa5prY/uHX1j/eVhP/39cU/9+XVX/bU9I/1Y/ObAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAFA7OABCMS8NfFdSjoxiXPN/XVX/gF9X/3RXT/1fRkC+SjczLQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAD8vLQAwJSQIXURARF9GQYVaRD6STTs2ZDotKhhMNzIAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA////////////////wAAf/wAAAH8AAAAfAAAAAQAAAAAAAAAAgAAAAIAA
        AACAAAAAgAAAAMAAAAHgAAAB4AAAAeAAAAHwAAAB/AAAAfwAAAD8AAAA/AAAAP4AAAD/AAEA/4ACAP/B
        /gD///8A////AP///4H///////////////8=
</value>
  </data>
</root>