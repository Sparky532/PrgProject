<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="$this.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAFBQUAAwMDBAEBAR4BAQFMAQEBeQEB
        AZkBAQGoAQEBqAEBAZkBAQF5AQEBTAICAh4BAQEEAAAAAAMEBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBERABAREQAQEREAAAAAAAJCgoJBQUFKwQE
        BEQDAwNOAwMDUgMDA1IDAwNSAwMDUgMDA04DBARGBQUFKxAQEAjS398AQEREAEBERAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAYHBwoHBwcXAwMDWAgI
        CCIICQkeAwMDWAMDA1oDAwNZAwMDWQMDA1kDAwNZAwMDWwQEBDsWGBgLAwMDUQQEBDUMDQ0SAQEBLQAA
        AAMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQEBAAEBAQoBAQFvAwMDWAQF
        BTwBAQHxAwMDVwMDA1EBAQH6AQEB/gEBAf4BAQH+AQEB/gEBAf4BAQH/AgICqAgJCRwBAQHZAgICkQYG
        BigBAQHJAAEBbgAAAAoAAAAACgoKAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMDAwADAwMIAQEBiAEB
        AfgCAgJyBAQEOwEBAfIDAwNYAwMDUQEBAfwBAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAgKpCQoKHQEB
        AdsCAgKRBgcHKAEBAegBAQH4AAEBfgEBAQMAAAAAQEREAAAAAAAAAAAAAAAAAEBERABAREQAAAAAAA0O
        DgoCAgKoAQEB/wICAnEEBQU7AQEB8gMDA1gDAwNRAQEB/AEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEC
        AqkJCQkcAQEB2gICApEGBwcoAQEB5wEBAf4CAgJ4iZGRAAsLCwBAREQAAAAAAAAAAAAAAAAAQEREAEBE
        RAA/Q0MCqbOzAQUGBi4BAQHVAgICcwQFBTsBAQHyAwMDWAMEBE4BAQHVAgICpAICAnoCAwNoAgICbgIC
        AosBAQHCAgICmAgJCR0BAQHbAgICkQYGBigBAQHoAgICrAoLCxJYXl4DQEREAUBERAAAAAAAAAAAAEBE
        RABAREQAQEREAUBERANAREQEr7i4AQQEBEUDAwNQBAQEPAEBAfEDAwNYDQ4OEAgJCSAJCgobBQUFMgQE
        BEIEBAQ8BgcHJwoLCxgICQkaCgsLGAEBAdQCAgKRBgcHKAECAqAGBgYjf4eHAkBERARAREQEQEREAUBE
        RAAAAAAAQEREAEBERABAREQDQEREBEBERARCRkYEOj09AyotLQYEBQU7AgIClQcICBsFBgYuAgICjAEB
        AdIBAQHvAQEB9wEBAfQBAQHlAQEBtgMDA18LDAwTAwMDVwICAnATFBQNCwsLFV5kZAJAREQEQEREBEBE
        RARAREQDQEREAEBERABAREQAQEREAUBERANAREQEQEREBEBERARBRUUEU1hYAxQVFQ0PEBARAgMDZQEB
        AeEBAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB+gICArAFBgYpFBYWDENHRwRaX18DQEREBEBE
        RARAREQEQEREBEBERANAREQBQEREAEBERABAREQCQEREBEBERARAREQEQEREBEBERARFSUkELjExBQIC
        AnIBAQH0AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAccFBQUojJWVAkBE
        RARAREQEQEREBEBERARAREQEQEREBEBERAJAREQAQEREAEBERANAREQEQEREBEBERARAREQEQEREBP//
        /wEDBARLAQEB7QEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wIC
        AqwODw8PUldXA0BERARAREQEQEREBEBERARAREQEQEREA0BERAFAREQBQEREBEBERARAREQEQEREBEBE
        RARTWFgDDxAQEQEBAboBAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEB
        Af8BAQH/AQEB+AMDA1v///8AQEREBEBERARAREQEQEREBEBERARAREQEQEREAUBERAJAREQEQEREBEBE
        RARAREQEQEREBP///wAEBAREAQEB8wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEB
        Af8BAQH/AQEB/wEBAf8BAQH/AQICrhkbGwpITU0DQEREBEBERARAREQEQEREBEBERARAREQCQEREAkBE
        RARAREQEQEREBEBERARAREQE////AQICAnsBAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEB
        Af8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQHeBwgIIn+HhwJAREQEQEREBEBERARAREQEQEREBEBE
        RAJAREQDQEREBEBERARAREQEQEREBEFFRQRLUFADAgICmgEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEB
        Af8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAe8EBQU2////AUBERARAREQEQEREBEBE
        RARAREQEQEREA0BERANAREQEQEREBEBERARAREQEQUVFBD5CQgQCAgKgAQEB/wEBAf8BAQH/AQEB/wEB
        Af8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB8gQFBTv///8AQEREBEBE
        RARAREQEQEREBEBERARAREQDQEREAkBERARAREQEQEREBEBERARAREQEnaenAgICAokBAQH/AQEB/wEB
        Af8BAQH/AQEB/gEBAf0BAQH9AQEB/QEBAf0BAQH9AQEB/gEBAf8BAQH/AQEB/wEBAf8BAQHnBgYGK5+p
        qQJAREQEQEREBEBERARAREQEQEREBEBERAJAREQCQEREBEBERARBRUUER0tLBFNYWAMAAAAABAUFPAIC
        AoQCAgJ3AwMDbQIDA2QDAwNdAwMDWAMDA1UDAwNVAwMDVQMDA1cDAwNbAgMDYAIDA2gCAgJxAgICfwIC
        AnIREhIOhIyMAktQUANESEgDQEREBEBERARAREQEQEREAktQUAGWmZkB6+3tAEFFRQQZGxsJDg8PEgkJ
        CRwGBwclBgYGLgQFBTgEBARBBAQESgMDA1ADAwNUAwMDVgMDA1YDAwNWAwMDVQMDA1IDBARNBAQERgQE
        BD0FBQUzBgYGKQgICCELCwsXEhMTDigrKwaFiYkB////AGJnZwFJTk4BDxAQBAQEBEECAgJ9AgICnQIC
        ArcBAQHLAQEB2QEBAeUBAQHtAQEB5gEBAdMBAQG4AgICnQICAoYCAgJ2AgICbgICAm4CAgJ3AgICiAIC
        AqECAgK9AQEB2QEBAekBAQHqAQEB3wEBAdIBAQHCAQICqwICAo4CAgJpBAUFMBMUFAEAAAADAQEBWQEC
        AqoBAQHJAQEB3gEBAewBAQH2AQEB4wICAnsEBAQ/CAgIIQoLCxgICQkeBgYGKwUFBTUEBQU8BAQEPAUF
        BTQGBwcpCQkJHQoLCxkHBwcnAwMDTgECAq4BAQH/AQEB+AEBAeYBAQHRAQEBuwICApQCAgJEBQUFAWNp
        aQCEi4sAJykpBRARERAICQkdBgYGLAQFBT0EBQU2FBUVBwMDA1QCAgKaAQICwAEBAdoBAQHpAQEB8QEB
        AfQBAQH0AQEB8AEBAecBAQHVAQEBuQICAokFBQUhAwMDOgEBAe0BAQHtAQEBtwMDA18MDQ0UUldXAgsN
        DQDT19cAQkZGAEFFRQBESEgDUVZWA2lvbwK1vb0BxMzMAcrPzwEVFxcLAQEBuwEBAf8BAQH/AQEB/wEB
        Af8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB+AMEBEoQEREQAQEBywEBAf8BAQH8AQEB4wQE
        BEYAAAAATVJSAEBERAAAAAAAQEREAEBERABAREQEQEREBEBERARAREQERUpKBB8hIQkBAQGyAQEB/wEB
        Af8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQHyBAUFOh4gIAgCAgK5AQEB/gEB
        AfMBAQHQAgICjAMDAxMDAwMAIyUlAAAAAABAREQAQEREAEBERAFAREQEQEREBEBERARCR0cELjExBQIC
        AqUBAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAecGBgYq////AAIC
        ApEBAQHlAQEB7gEBAfcBAQFwAAAAAwAAAAACBAQAAAAAAEBERABAREQAQEREAEBERAFAREQEQEREBEBE
        RASKk5MCAgICjQEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB0AsL
        Cxa+ysoBBgcHJwICAmsBAQHkAQEBiQEBAQoBAQEAAAAAAAAAAAAAAAAAAAAAAEBERABAREQAQEREAEBE
        RAFAREQEQEREBP///wACAwNjAQEB/gEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEB
        Af8BAgKmJigoBkRJSQP///8AAwMDJwEBAXgCAgIPAgICAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBE
        RABAREQAQEREAEBERAFAREQE////AQUFBTQBAQHqAQEB/wEBAf8BAQH/AQEB/wEBAf8BAQH/AQEB/wEB
        Af8BAQH/AQEB/wICAm3///8AQEREBERJSQMWFxcFAgICBQIDAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAEBERABAREQAQEREAEBERABLT08DFRcXCQICApoBAQH/AQEB/wEBAf8BAQH/AQEB/wEB
        Af8BAQH/AQEB/wEBAf8BAQHICAgIIYSMjAJAREQDQEREAUBERABAREQAQEREAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQEREAEBERAAAAAAABAUFFwICApMBAQHoAQEB/AEB
        Af8BAQH/AQEB/wEBAf4BAQHuAQICqAQEBC3///8AQEREAUBERABAREQAQEREAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAQEREAEBERAADAwMABwgIBwEB
        ATYBAgJvAQEBlAEBAaQBAQGeAQEBfQICAkEEBAQLAAAAAEBERABBRUUAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA/8AD///AA//8AAA/+AAAH/AAAA/wAAAf4AAAB8AAAAPAAAADgAAAAYAA
        AAGAAAAAAAAAgAIAAAAAAAAAAAAAAAAAAEAAAAAAAgAAACAAAAQAAAAAAAAAAMAAAAPAAAAH4AAAA+AA
        AQPwAAAH+IAAj/wAAh//AAB//8AF///gD/8=
</value>
  </data>
</root>